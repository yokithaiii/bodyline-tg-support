const { Scenes, Markup } = require('telegraf');
const { getSubscriptions, unlockSubscription } = require('../helpers/api');
const { mainKeyboard, backKeyboard } = require('../helpers/keyboards');
const { validateEmail } = require('../helpers/validators');

const createRequestScene = new Scenes.BaseScene('UNLOCK_APP_SCENE')
    .enter(async (ctx) => {
        await ctx.reply('–î–ª—è –ø–æ–∏—Å–∫–∞ –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à email: üîé', backKeyboard);
    })
    .on('text', async (ctx) => {
        if (ctx.message.text === '–ù–∞–∑–∞–¥' || ctx.message.text === '/start') {
            ctx.scene.leave();
            return ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', mainKeyboard);
        }

        if (!ctx.scene.state.email) {

            if (!validateEmail(ctx.message.text)) {
                return ctx.reply('‚ùå –í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:', backKeyboard);
            }

            ctx.scene.state.email = ctx.message.text;

            try {
                await ctx.reply('‚úÖ –ò—â–µ–º –í–∞—à –∞–∫–∫–∞—É–Ω—Ç...');
                const subscriptions = await getSubscriptions(ctx, ctx.scene.state.email);

                if (!subscriptions || subscriptions.length === 0) {
                    await ctx.reply('‚ùå –ü–æ–¥–ø–∏—Å–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.');
                    ctx.scene.leave();
                    return ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', mainKeyboard);
                }

                const buttons = subscriptions.map((item) => [item.firstname]);
                buttons.push(['–ù–∞–∑–∞–¥']);

                await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–µ–Ω–µ—Ä–∞, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–∫—Ä—ã—Ç—å –¥–æ—Å—Ç—É–ø:', {
                    reply_markup: {
                        keyboard: buttons,
                        resize_keyboard: true,
                        one_time_keyboard: true,
                    },
                });
            } catch (error) {
                await ctx.reply(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
                ctx.scene.leave();
                return ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', mainKeyboard);
            }
        } else {
            const subscriptions = await getSubscriptions(ctx, ctx.scene.state.email);
            const selectedSubscription = subscriptions.find(item => item.firstname === ctx.message.text);

            if (!selectedSubscription) {
                return ctx.reply('‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.');
            }

            try {
                await unlockSubscription(ctx, ctx.scene.state.email, selectedSubscription.id);
                await ctx.reply('‚úÖ –î–æ—Å—Ç—É–ø —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã—Ç!');
            } catch (error) {
                await ctx.reply(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
            }

            ctx.scene.leave();
            return ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', mainKeyboard);
        }
    });

module.exports = createRequestScene;