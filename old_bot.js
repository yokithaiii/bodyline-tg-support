require('dotenv').config()
const TelegramBot = require('node-telegram-bot-api')
const axios = require('axios')
const token = process.env.TELEGRAM_BOT_TOKEN
const commands = require('./commands.json')

const bot = new TelegramBot(token, { polling: true })

const BOT_STATES = {
    MAIN_STATE: 'MAIN_STATE',
    FAQ_STATE: 'FAQ_STATE', 
    OPEN_SUB_STATE: 'OPEN_SUB_STATE',
    OPEN_MARATHON_STATE: 'OPEN_MARATHON_STATE',
    SAVE_REQUEST_EMAIL_STATE: 'SAVE_REQUEST_EMAIL_STATE',
    SAVE_REQUEST_STATE: 'SAVE_REQUEST_STATE',
}

bot.setMyCommands(commands)

const userState = {}
let tempEmail = null

const processMessages = [
    '–°–µ–∫—É–Ω–¥—É...',
    '–ò—â–µ–º –Ω—É–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é...',
    '–ò—â–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å...',
    '–ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç–≤–µ—Ç...',
    '–®–µ–≤–µ–ª—é —à–µ—Å—Ç–µ—Ä–µ–Ω–∫–∞–º–∏...',
    '–°–ø—Ä–∞—à–∏–≤–∞—é —É —Å–≤–æ–µ–≥–æ —Ö–æ–∑—è–∏–Ω–∞...',
    '–¢–∞–∞–∞–∫...'
]

const mainKeyboard = {
    reply_markup: {
        keyboard: [
            ['–û—Ç–∫—Ä—ã—Ç—å –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é üì±', '–û—Ç–∫—Ä—ã—Ç—å –¥–æ—Å—Ç—É–ø –∫ –º–∞—Ä–∞—Ñ–æ–Ω—É üèÜ'],
            ['–û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã ‚ÅâÔ∏è', '–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å üìù'],
        ],
        resize_keyboard: true,
        one_time_keyboard: true
    }
}

function randomIntFromInterval(min, max) {
    return Math.floor(Math.random() * (max - min + 1) + min);
}

function errorHandler(error) {
    return error.response.data.error;
}

// –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã
async function getFAQ(chatId) {
    try {
        const response = await axios.get(`${process.env.BACKEND_API_URL}/get-faq`);
        return response.data;
    } catch (error) {
        await bot.sendMessage(chatId, `–û—à–∏–±–∫–∞: ${errorHandler(error)}`);
        await showMainMenu(chatId);
        return;
    }
}

// –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function getSub(chatId, email) {
    try {
        const response = await axios.get(`${process.env.BACKEND_API_URL}/get-sub?email=${email}`);
        return response.data;
    } catch (error) {
        await bot.sendMessage(chatId, `–û—à–∏–±–∫–∞: ${errorHandler(error)}`);
        await showMainMenu(chatId);
        return;
    }
}

// –ü–æ–ª—É—á–∞–µ–º –∫—É–ø–ª–µ–Ω–Ω—ã–π –º–∞—Ä–∞—Ñ–æ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function getMarathon(chatId, email, workoutId) {
    try {
        const response = await axios.get(`${process.env.BACKEND_API_URL}/get-workout?email=${email}&workout_id=${workoutId}`);
        return response.data;
    } catch (error) {
        await bot.sendMessage(chatId, `–û—à–∏–±–∫–∞: ${errorHandler(error)}`);
        await showMainMenu(chatId);
        return;
    }
}

async function saveRequest(chatId, request, email) {
    try {
        const response = await axios.post(`${process.env.BACKEND_API_URL}/request`, {
            email: email,
            request: request
        });
        return response.data;
    } catch (error) {
        await bot.sendMessage(chatId, `–û—à–∏–±–∫–∞: ${errorHandler(error)}`);
        await showMainMenu(chatId);
        return;
    }
}

// –ü–æ–∫–∞–∑—ã–≤–µ–º –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
async function showMainMenu(chatId) {
    userState[chatId] = BOT_STATES.MAIN_STATE;

    bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', mainKeyboard);
}

// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –∏–∑ FAQ
async function sendFAQ(chatId, firstRender) {
    userState[chatId] = BOT_STATES.FAQ_STATE;

    const faq = await getFAQ();

    if (!faq) {
        bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ FAQ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        await showMainMenu(chatId);
        return;
    }

    const questionButtons = faq.map((item) => [item.question]);
    questionButtons.push(['–ù–∞–∑–∞–¥']);

    let text = null;
    if (firstRender == true) {
        text = '–ö–∞–∫–æ–π –≤–æ–ø—Ä–æ—Å –í–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞:';
    } else {
        text = '–î—Ä—É–≥–∏–µ –≤–æ–ø—Ä–æ—Å—ã:';
    }

    bot.sendMessage(chatId, text, {
        reply_markup: {
            keyboard: questionButtons,
            resize_keyboard: true,
            one_time_keyboard: true
        }
    });
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
bot.onText(/\/start/, (msg) => {
    const chatId = msg.chat.id;
    const userName = msg.from.first_name || '–Ω–µ–∑–Ω–∞–∫–æ–º–µ—Ü';

    bot.sendMessage(
        chatId,
        `–ü—Ä–∏–≤–µ—Ç, ${userName}! üëã\n–Ø —á–∞—Ç-–±–æ—Ç Bodyline-Supportüí™üèº. –í—ã–±–µ—Ä–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏–∑ –º–µ–Ω—é, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:`,
        mainKeyboard
    );

    userState[chatId] = BOT_STATES.MAIN_STATE;
})

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('message', async (msg) => {
    const chatId = msg.chat.id;
    const text = msg.text;

    const currentState = userState[chatId] || BOT_STATES.MAIN_STATE;

    switch (currentState) {

        case BOT_STATES.MAIN_STATE:
            if (text === '–û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã') {
                await sendFAQ(chatId, true);
            } else if (text === '–û—Ç–∫—Ä—ã—Ç—å –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é') {
                userState[chatId] = BOT_STATES.OPEN_SUB_STATE;

                bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email: ', {
                    reply_markup: {
                        keyboard: [['–ù–∞–∑–∞–¥']],
                        resize_keyboard: true,
                        one_time_keyboard: true
                    }
                });
            } else if (text === '–û—Ç–∫—Ä—ã—Ç—å –¥–æ—Å—Ç—É–ø –∫ –º–∞—Ä–∞—Ñ–æ–Ω—É') {
                userState[chatId] = BOT_STATES.OPEN_MARATHON_STATE;

                bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email: ', {
                    reply_markup: {
                        keyboard: [['–ù–∞–∑–∞–¥']],
                        resize_keyboard: true,
                        one_time_keyboard: true
                    }
                });
            } else if (text === '–°–æ–∑–¥–∞—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ') {
                userState[chatId] = BOT_STATES.SAVE_REQUEST_EMAIL_STATE;

                bot.sendMessage(chatId, '–î–ª—è –Ω–∞—á–∞–ª–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –í–∞—à email: ', {
                    reply_markup: {
                        keyboard: [['–ù–∞–∑–∞–¥']],
                        resize_keyboard: true,
                        one_time_keyboard: true
                    }
                });
            } else if (text === '/start') {
            } else {
                bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤');
            }
            break;

        case BOT_STATES.FAQ_STATE:
            if (text === '–ù–∞–∑–∞–¥') {
                showMainMenu(chatId);
            } else {
                // bot.sendMessage(chatId, processMessages[randomIntFromInterval(1, 7)]); 
                const faq = await getFAQ();

                if (faq) {
                    const selectedFAQ = faq.find((item) => item.question === text);

                    if (selectedFAQ) {
                        await bot.sendMessage(chatId, selectedFAQ.answer);
                        await sendFAQ(chatId, false);
                    } else {
                        bot.sendMessage(chatId, '–í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –∏–∑ —Å–ø–∏—Å–∫–∞.');
                    }
                }
            }
            break;

        case BOT_STATES.OPEN_SUB_STATE:
            if (text === '–ù–∞–∑–∞–¥') {
                showMainMenu(chatId);
            } else {
                bot.sendMessage(chatId, `–ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email: ${text}...`);
                
                const sub = await getSub(chatId, text);

                if (sub) {
                    bot.sendMessage(chatId, '–ù–∞—à–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É, –¥–∞–ª–µ–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏...');
                }
            }
            break;

        case BOT_STATES.OPEN_MARATHON_STATE:
            if (text === '–ù–∞–∑–∞–¥') {
                showMainMenu(chatId);
            } else {
                bot.sendMessage(chatId, `–ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email: ${text}...`);

                const marathon = await getMarathon(chatId, text);

                if (marathon) {
                    bot.sendMessage(chatId, '–ù–∞—à–ª–∏ –º–∞—Ä–∞—Ñ–æ–Ω, –¥–∞–ª–µ–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏...');
                }
            }
            break;

        case BOT_STATES.SAVE_REQUEST_EMAIL_STATE:
            if (text === '–ù–∞–∑–∞–¥') {
                showMainMenu(chatId);
            } else {
                if (!userState[chatId]) {
                    userState[chatId] = {};
                }

                tempEmail = text;
                userState[chatId] = BOT_STATES.SAVE_REQUEST_STATE;

                bot.sendMessage(chatId, '–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É: ', {
                    reply_markup: {
                        keyboard: [['–ù–∞–∑–∞–¥']],
                        resize_keyboard: true,
                        one_time_keyboard: true
                    }
                });
            }
            break;

        case BOT_STATES.SAVE_REQUEST_STATE:
            if (text == '–ù–∞–∑–∞–¥') {
                showMainMenu(chatId);
            } else {

                const request = await saveRequest(chatId, text, tempEmail);

                if (request) {
                    bot.sendMessage(chatId, '–í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!');
                    showMainMenu(chatId);
                }
            }
            break;

        default:
            showMainMenu(chatId);
    }
})

