const { Scenes } = require('telegraf');
const { getMarathons, unlockMarathon } = require('../helpers/api');
const { mainKeyboard, backKeyboard } = require('../helpers/keyboards');
const { validateEmail } = require('../helpers/validators');

const createRequestScene = new Scenes.BaseScene('UNLOCK_MARATHON_SCENE')
    .enter(async (ctx) => {
        try {
            await ctx.reply('‚úÖ –ò—â–µ–º –º–∞—Ä–∞—Ñ–æ–Ω—ã...');
            const workouts = await getMarathons();
            const buttons = workouts.map(item => [item.title]);
            buttons.push(['–ù–∞–∑–∞–¥']);
            
            return await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ä–∞—Ñ–æ–Ω, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –æ—Ç–∫—Ä—ã—Ç—å:', {
                reply_markup: {
                    keyboard: buttons,
                    resize_keyboard: true,
                    one_time_keyboard: true
                }
            });
        } catch (error) {
            await ctx.reply(`‚ùå ${error.message}`);
            ctx.scene.leave();
        }
    })
    .on('text', async (ctx) => {
        if (ctx.message.text === '–ù–∞–∑–∞–¥') {
            ctx.scene.leave();
            return ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', mainKeyboard);
        }

        if (!ctx.scene.state.marathonId) {
            const workouts = await getMarathons();
            const selected = workouts.find(item => item.title === ctx.message.text);

            if (!selected) {
                return ctx.reply(`‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –Ω–∏–∂–µ–ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤`);
            }

            ctx.scene.state.marathonId = selected.id;
            return ctx.reply('–î–ª—è –ø–æ–∏—Å–∫–∞ –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à email: üîé', backKeyboard);
        }

        if (!ctx.scene.state.email) {
            if (!validateEmail(ctx.message.text)) {
                return ctx.reply(`‚ùå –í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email`);
            }

            ctx.scene.state.email = ctx.message.text;

            try {
                await unlockMarathon(ctx, ctx.scene.state.marathonId);
                await ctx.reply('‚úÖ –û—Ç–∫—Ä—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø, –∂–¥–∏—Ç–µ!');
            } catch (error) {
                await ctx.reply(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
            }

            ctx.scene.leave();
            return ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', mainKeyboard);
        }
    });

module.exports = createRequestScene;